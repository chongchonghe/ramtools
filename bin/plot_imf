#!/usr/bin/env python

import os, sys
import yt
import numpy as np
from numpy.linalg import norm
import matplotlib.pyplot as plt
from ramtools import ytfast, ramses, Ramses, plotutils, imf, NoSinkParticle, ramsesbase, \
        utilities as ut
import argparse
import warnings
from glob import glob
warnings.filterwarnings("ignore")

try:
    plt.style.use(['science', 'no-latex'])
except:
    pass

def get_args():
    args = argparse.ArgumentParser(description="A program to efficiently make slices/projections plots of a RAMSES simualtion. Examples:>>> plot_projection Job10 all z -t Job10/figures \n>>> plot_projection Job10 10-20 x,y,z -t Job10/figures -c 0.6,0.6,0,6 -w 10,pc -f den,temp -k slc,prj")
    args.add_argument("jobdir", default="..", nargs="?",
                      help="Path to the simulation directory")
    args.add_argument("outs", default="all", nargs="?",
                      help="Output frames. If 'all', do all output frames. "
                      "Examples: '10', '10,11,13', '10-20'.")
    args.add_argument("-c", "--center", default='c',
                      help="The center. Examples: 'c', '0.5,0.5,0.5'. Default: 'c'")
    args.add_argument("-w", "--width", default='inf',
                      help="The width of the view. Examples: '1', '1000,AU'. Default: '1'")
    args.add_argument("-t", "--to", default='./MF',
                      help="The destination directory. Default: '.'")
    args.add_argument("--mass-lim", type=float, nargs="+",
                      help="Turn on overplotting sink particles")
    args.add_argument("--kroupa", action="store_true",
                      help="Enable overplotting mass-normalized Kroupa IMF")
    args.add_argument("--kroupa-max", default="totmass",
                      help="Default: totmass, = sum(sink_masses)")
    args.add_argument("--kroupa-min", default="min",
                      help="Default: sinkmin, = max(min(sink_masses), 10**-1.25)")
    args.add_argument("-o", "--overwrite", action="store_true",
                      help="Toggle overwrite existing figures.")
    args.add_argument("--short", action="store_true",
                      help="Make short figures instead of a square one.")
    args.add_argument("--ylim", nargs=2, type=float,
                      help="Set ylim.")
    args.add_argument("--xlim", nargs=2, type=float,
                      help="Set xlim.")
    args.add_argument("--inzoombox", action="store_true",
                      help="with center=integer, use sink particles in zoombox only.")

    return args.parse_args()


def main(args):
    os.makedirs(args.to, exist_ok=1)
    os.makedirs(os.path.join(args.to, "pdfs"), exist_ok=1)

    use_sink_as_center = False
    if args.center == 'c':
        center = [0.5, 0.5, 0.5]
    elif args.center == 'zoomc':    # use zoom center
        nmls = sorted(glob(f"{args.jobdir}/*.nml"))
        if len(nmls) == 0:
            print(f"Failed to load a namelist file. Is {args.jobdir} a valid job directory?")
            return
        nml = nmls[0]
        # print(f"Reading center from namelist file {nml}")
        center = ut.read_zoom_center(nml)
    elif ',' in args.center:
        center = [float(i) for i in args.center.split(',')]
    else:
        use_sink_as_center = True
        sink_center = int(args.center)

    if 'zoomr' in args.width:
        nmls = sorted(glob(f"{args.jobdir}/*.nml"))
        if len(nmls) == 0:
            print(f"Failed to load a namelist file. Is {args.jobdir} a valid job directory?")
            return
        nml = nmls[0]
        # print(f"Reading width from namelist file {nml}")
        idx = -1
        if len(args.width) > 5:
            idx = int(args.width[5:])
        width = ut.read_zoom_radius(nml, idx) * 2
    elif ',' in args.width:
        p1, p2 = args.width.split(',')
        width = (float(p1), p2)
    else:
        width = float(args.width)

    s = imf.Sink(args.jobdir)
    width = ramsesbase.to_boxlen(width, s.ds1)
    zoomc = s.read_zoom_center()
    zoomr = s.read_zoom_radius()
    r = s
    if args.outs == 'all':
        outs = r.get_all_outputs()
    else:
        if '-' in args.outs:
            splits = [int(i) for i in args.outs.split('-')]
            if len(splits) == 2:
                outi, outf = splits
                outs = range(outi, outf + 1)
            elif len(splits) == 3:
                outi, outf, diff = splits
                outs = range(outi, outf + 1, diff)
        else:
            outs = [int(i) for i in args.outs.split(',')]
    for out in outs:
        fn = f"{args.to}/imf_out_{out}.png"
        if not args.overwrite and os.path.exists(fn):
            print(f"{fn} exists. Skipped")
            continue
        if use_sink_as_center:
            try:
                pos = r.get_sink_positions(out) / r.boxlen
                if args.inzoombox:
                    inside = np.max(pos - zoomc, axis=1) <= zoomr
                    if np.sum(inside) == 0:
                        print(f"No sink particles inside zoombox in frame {out}")
                        continue
                    center = pos[inside][sink_center]
                else:
                    center = pos[sink_center]
                # center = r.get_sink_positions(out)[sink_center] / r.boxlen
            except FileNotFoundError:
                continue
            except ramses.NoSinkParticle:
                print(f"No sink particle found in out {out}.")
                continue
        smin = args.kroupa_min
        smax = args.kroupa_max
        try:
            masses = s.get_sink_masses(out)
            pos = s.get_sink_positions(out) / s.boxlen
        except NoSinkParticle:
            print("No sink particles found in frame", out)
            continue
        except FileNotFoundError:
            continue
        dists = []
        m_inside = []
        for i in range(len(masses)):
            if np.max(np.abs(pos[i] - center)) <= width / 2:
                m_inside.append(masses[i])
            dists.append(norm(pos[i] - center))
        # print a log
        # print(f"In frame {out}, the distances of the stars to the center are")
        # print(dists)
        if smin == "min":
            smin = np.min(masses)
        else:
            smin = float(smin)
        if smax == "totmass":
            smax = np.sum(masses)
        elif smax == "max":
            smax = np.max(masses)
        else:
            smax = float(smax)
        lims = {}
        if args.xlim is not None: lims["xlim"] = args.xlim
        if args.ylim is not None: lims["ylim"] = args.ylim
        f, ax = s.quick_plot_IMF(out=out, is_kroupa=args.kroupa, masses=m_inside,
                                 kroupa_kwargs={"m_min": smin, "m_max": smax},
                                 **lims)
        if args.short:
            f.set_size_inches([4.6, 1.6])
        f.savefig(fn, dpi=300)
        f.savefig(f"{args.to}/pdfs/imf_out_{out}.pdf")
        print(fn, 'saved')
    return

if __name__ == '__main__':
    sys.exit(main(get_args()))
