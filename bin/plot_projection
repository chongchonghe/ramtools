#!/usr/bin/env python
"""
For documentation, check docs/index.rst
"""

import argparse

def get_args():
    args = argparse.ArgumentParser(description="A program to efficiently make slices/projections plots of a RAMSES simualtion. Examples:>>> plot_projection Job10 all z -t Job10/figures \n>>> plot_projection Job10 10-20 x,y,z -t Job10/figures -c 0.6,0.6,0,6 -w 10,pc -f den,temp -k slc,prj")
    args.add_argument("jobdir",
                      help="Path to the simulation directory")
    args.add_argument("outs", 
                      help="Output frames. If 'all', do all output frames. "
                      "Examples: '10', '10,11,13', '10-20'.")
    args.add_argument("axes",
                      help="The line of sight. Examples: 'x', 'x,y,z'")
    args.add_argument("-c", "--center", default='c',
                      help="The center. Examples: 'c', '0.5,0.5,0.5'. Default: 'c'")
    args.add_argument("-w", "--width", default='1',
                      help="The width of the view. Examples: '1', '1000,AU'. Default: '1'")
    args.add_argument("-f", "--fields", default='den',
                      help="The fields to plot. Examples: 'den', 'den,temp'. Default: 'den'")
    args.add_argument("-t", "--to", default='.',
                      help="The destination directory. Default: '.'")
    args.add_argument("-k", "--kinds", default='slc',
                      help="Plot types. Examples: 'prj', 'prj,slc'. Default: 'slc'")
    return args.parse_args()


def main(args):
    """
    Main function of plot_projection

    """
    # print(args)
    # return

    import os
    import yt
    import numpy as np
    import matplotlib.pyplot as plt
    from ramtools import ytfast, Ramses, plotutils

    # plt.style.use(['science', 'no-latex'])

    r = Ramses(args.jobdir)
    if args.outs == 'all':
        outs = r.get_all_outputs()
    else:
        if '-' in args.outs:
            splits = [int(i) for i in args.outs.split('-')]
            if len(splits) == 2:
                outi, outf = splits
                outs = range(outi, outf + 1)
            elif len(splits) == 3:
                outi, outf, diff = splits
                outs = range(outi, outf + 1, diff)
        else:
            outs = [int(i) for i in args.outs.split(',')]
    if ',' in args.center:
        center = [float(i) for i in args.center.split(',')]
    else:
        center = args.center
    if ',' in args.width:
        p1, p2 = args.width.split(',')
        width = (float(p1), p2)
    else:
        width = float(args.width)
    os.makedirs(args.to, exist_ok=1)
    for out in outs:
        ds = r.load_ds(out)
        for field in args.fields.split(','):
            if field == "den":
                field = "density"
            if field in ["tem", "temp"]:
                field = "temperature"
            thefield = ('gas', field)
            for axis in args.axes.split(','):
                for kind in args.kinds.split(','):
                    if kind == 'slc':
                        thefunc = ytfast.SlicePlot
                        p = thefunc(ds, axis, thefield, center=center, width=width)
                    elif kind == 'prj':
                        thefunc = ytfast.ProjectionPlot
                        p = thefunc(ds, axis, thefield, center=center, width=width,
                                    weight_field=('gas', 'density'))
                    if field == 'density':
                        plotutils.den_setup(p)
                    fo = f"{kind}-{axis}-{field}-out{out}.png"
                    p.save((args.to, fo), mpl_kwargs={"dpi": 300})
                    plt.close('all')


if __name__ == '__main__':
    exit(main(get_args()))
