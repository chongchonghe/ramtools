#!/usr/bin/env python
"""
For documentation, check docs/index.rst
"""

import os, sys
import argparse
import warnings
warnings.filterwarnings("ignore")

def get_args():
    args = argparse.ArgumentParser(description="A program to efficiently make slices/projections plots of a RAMSES simualtion. Examples:>>> plot_projection Job10 all z -t Job10/figures \n>>> plot_projection Job10 10-20 x,y,z -t Job10/figures -c 0.6,0.6,0,6 -w 10,pc -f den,temp -k slc,prj")
    args.add_argument("jobdir", nargs="?", default="..",
                      help="Path to the simulation directory")
    args.add_argument("outs",  nargs="?", default="all",
                      help="Output frames. If 'all', do all output frames. "
                      "Examples: '10', '10,11,13', '10-20', '10-20-2'.")
    args.add_argument("axes", nargs="?", default="x,y,z",
                      help="The line of sight. Examples: 'x', 'x,y,z'")
    args.add_argument("-c", "--center", default='c',
                      help="The center. Examples: 'c', '0.5,0.5,0.5'. Default: 'c'\n"
                      "Cases:\n"
                      "    'c': 0.5, 0.5, 0.5\n"
                      "    x,y,z: position in boxlen unit\n"
                      "    integer: use the location of a sink particle with the given index as the center\n"
                     )
    args.add_argument("-w", "--width", default='1',
                      help="The width of the view. Examples: '1', '1000,AU'. Default: '1'")
    args.add_argument("-f", "--fields", default='den',
                      help="The fields to plot. Examples: 'den', 'den,temp'. Default: 'den'")
    args.add_argument("-t", "--to", default='./projections',
                      help="The destination directory. Default: '.'")
    args.add_argument("-k", "--kinds", default='slc,prj',
                      help="Plot types. Examples: 'prj', 'prj,slc'. Default: 'slc'")
    args.add_argument("-s", "--sink", action="store_true",
                      help="Turn on overplotting sink particles")
    args.add_argument("--mass-lim", type=float, nargs="+",
                      help="Turn on overplotting sink particles")
    args.add_argument("-o", "--overwrite", action="store_true",
                      help="Turn on overwritting")
    args.add_argument("-p", "--params", type=dict, default={},
                      help="A dictionary of extra parameters")
    args.add_argument("--den-zlim", type=float, nargs=2,
                      help="zlim of density (in cm-3)")
    args.add_argument("--T-zlim", type=float, nargs=2,
                      help="zlim of temperature (in K)")
    args.add_argument("--xHII-zlim", type=float, nargs=2,
                      help="zlim of xHII")
    return args.parse_args()


def main(args):
    """
    Main function of plot_projection

    """

    # put imports inside main() to make -h run faster
    import yt
    import numpy as np
    import matplotlib.pyplot as plt
    from ramtools import ytfast, Ramses, plotutils, ramses

    try:
        plt.style.use(['science', 'no-latex'])
    except:
        pass

    r = Ramses(args.jobdir)
    if args.outs == 'all':
        outs = r.get_all_outputs()
    else:
        if '-' in args.outs:
            splits = [int(i) for i in args.outs.split('-')]
            if len(splits) == 2:
                outi, outf = splits
                outs = range(outi, outf + 1)
            elif len(splits) == 3:
                outi, outf, diff = splits
                outs = range(outi, outf + 1, diff)
        else:
            outs = [int(i) for i in args.outs.split(',')]
    use_sink_as_center = False
    if args.center == 'c':
        center = [0.5, 0.5, 0.5]
    elif ',' in args.center:
        center = [float(i) for i in args.center.split(',')]
    else:
        use_sink_as_center = True
        sink_center = int(args.center)
    if ',' in args.width:
        p1, p2 = args.width.split(',')
        width = (float(p1), p2)
    else:
        width = float(args.width)
    os.makedirs(args.to, exist_ok=1)
    for out in outs:
        if not r.exist(out):
            print(f"Skipping frame {out}")
            continue
        ds = r.load_ds(out)
        width = ramses.to_boxlen(width, ds)
        if use_sink_as_center:
            center = r.get_sink_positions(out)[sink_center] / r.boxlen
        for field in args.fields.split(','):
            if field == "den":
                thefield = ("gas", "density")
            elif field in ["tem", "temp"]:
                thefield = ("gas", "temperature")
            else:
                thefield = ("gas", field)
            for axis in args.axes.split(','):
                for kind in args.kinds.split(','):
                    fo = f"{kind}-{axis}-{field}-out{out}.png"
                    if (not args.overwrite) and os.path.exists(os.path.join(args.to, fo)):
                        print(fo, "exists. Skipping")
                        continue
                    if kind == 'slc':
                        thefunc = ytfast.SlicePlot
                        p = thefunc(ds, axis, thefield, center=center, width=width)
                    elif kind == 'prj':
                        thefunc = ytfast.ProjectionPlot
                        p = thefunc(ds, axis, thefield, center=center, width=width,
                                    weight_field=('gas', 'density'))
                    if field in ['den', 'density']:
                        plotutils.den_setup(p)
                    # if 'zlim' in args.params:
                    #     if field in args.params['zlim']:
                    #         p.set_zlim(thefield, *args.params['zlim'][field])
                    if thefield[1] == "density" and args.den_zlim is not None:
                        p.set_zlim(thefield, *args.den_zlim)
                    elif thefield[1] == "temperature" and args.T_zlim is not None:
                        p.set_zlim(thefield, *args.T_zlim)
                    elif thefield[1] == "xHII" and args.xHII_zlim is not None:
                        p.set_zlim(thefield, *args.xHII_zlim)
                    # overplot sink particles
                    if args.sink:
                        is_id = False
                        lims = [0.1, 10]
                        if args.mass_lim is not None:
                            lims = args.mass_lim
                        r.overplot_sink_with_id(
                            p, out, center, width/2, is_id=is_id,
                            zorder='mass', withedge=1, lims=lims)
                    p.save((args.to, fo), mpl_kwargs={"dpi": 300})
                    print(fo, "saved")
                    plt.close('all')


if __name__ == '__main__':
    sys.exit(main(get_args()))
